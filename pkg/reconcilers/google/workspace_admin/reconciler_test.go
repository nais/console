//go:build adhoc_integration_test

package google_workspace_admin_reconciler_test

import (
	"context"
	"fmt"
	"io/ioutil"
	"log"
	"testing"

	"golang.org/x/oauth2/google"
	admin "google.golang.org/api/admin/directory/v1"
	"google.golang.org/api/option"
)

func TestTheWholeThing(t *testing.T) {

	ctx := context.Background()
	b, err := ioutil.ReadFile("/tmp/credentials.json")
	if err != nil {
		t.Skipf("Unable to read client secret file: %v", err)
	}

	config, err := google.JWTConfigFromJSON(
		b,
		admin.AdminDirectoryUserReadonlyScope,
		admin.AdminDirectoryGroupScope,
	)
	if err != nil {
		log.Fatalf("Unable to parse client secret file to config: %v", err)
	}

	// what the fuck????????
	config.Subject = "nais@mattilsy.net"

	client := config.Client(ctx)
	srv, err := admin.NewService(ctx, option.WithHTTPClient(client))
	if err != nil {
		log.Fatalf("Unable to retrieve directory Client %v", err)
	}

	//r, err := srv.Users.List().Do()
	r, err := srv.Users.List().Domain("mattilsy.net").Do()
	//r, err := srv.Users.List().Customer("mattilsy.net").MaxResults(10).
	//	OrderBy("email").Do()
	if err != nil {
		log.Fatalf("Unable to retrieve users in domain: %v", err)
	}

	if len(r.Users) == 0 {
		fmt.Print("No users found.\n")
	} else {
		fmt.Print("Users:\n")
		for _, u := range r.Users {
			fmt.Printf("%s (%s)\n", u.PrimaryEmail, u.Name.FullName)
		}
	}

	grp := &admin.Group{
		Description: "auto-generated by nais console",
		Email:       "nais-team-xyz@mattilsy.net",
		Id:          "nais-team-xyz",
		Name:        "NAIS team 'xyz'",
	}
	grp, err = srv.Groups.Insert(grp).Do()
	if err != nil {
		panic(err)
	}

	log.Printf("%#v", grp)
}

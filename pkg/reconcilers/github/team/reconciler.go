package github_team_reconciler

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/bradleyfalzon/ghinstallation/v2"
	"github.com/google/go-github/v43/github"
	"github.com/nais/console/pkg/dbmodels"
	"github.com/nais/console/pkg/reconcilers"
	"github.com/shurcooL/githubv4"
)

// gitHubReconciler creates teams on GitHub and connects users to them.
type gitHubReconciler struct {
	logs                chan<- *dbmodels.AuditLog
	ghAppId             int64
	ghAppInstallationId int64
	org                 string
	privateKeyPath      string
}

func (s *gitHubReconciler) getTransport() (*ghinstallation.Transport, error) {
	itr, err := ghinstallation.NewKeyFromFile(
		http.DefaultTransport,
		s.ghAppId,
		s.ghAppInstallationId,
		s.privateKeyPath,
	)

	if err != nil {
		return nil, err
	}

	return itr, nil
}

func (s *gitHubReconciler) getRestClient() (*github.Client, error) {
	transport, err := s.getTransport()

	if err != nil {
		return nil, err
	}

	return github.NewClient(&http.Client{
		Transport: transport,
	}), nil
}

func (s *gitHubReconciler) getGraphQLClient() (*githubv4.Client, error) {
	transport, err := s.getTransport()

	if err != nil {
		return nil, err
	}

	return githubv4.NewClient(&http.Client{
		Transport: transport,
	}), nil
}

func New(logs chan<- *dbmodels.AuditLog, ghAppId, ghInstallationId int64, org, privateKeyPath string) *gitHubReconciler {
	return &gitHubReconciler{
		logs:                logs,
		ghAppId:             ghAppId,
		ghAppInstallationId: ghInstallationId,
		org:                 org,
		privateKeyPath:      privateKeyPath,
	}
}

func (s *gitHubReconciler) Name() string {
	return "github:team"
}

func (s *gitHubReconciler) Op(operation string) string {
	return s.Name() + ":" + operation
}

func (s *gitHubReconciler) Reconcile(ctx context.Context, in reconcilers.Input) error {
	client, err := s.getRestClient()

	if err != nil {
		// fixme: this should be done outside in order to fail fast if a key is not present
		return in.AuditLog(nil, false, s.Op("init"), "retrieve API client: %s", err)
	}

	team, err := s.getOrCreateTeam(ctx, client.Teams, in)
	if err != nil {
		return in.AuditLog(nil, false, s.Op("create"), "ensure team exists: %s", err)
	}

	err = s.connectUsers(ctx, in, client, team)

	return err
}

func (s *gitHubReconciler) getOrCreateTeam(ctx context.Context, teamsService *github.TeamsService, in reconcilers.Input) (*github.Team, error) {
	if in.Team == nil || in.Team.Slug == nil {
		return nil, fmt.Errorf("refusing to create team with empty slug")
	}

	existingTeam, _, err := teamsService.GetTeamBySlug(ctx, s.org, *in.Team.Slug)

	if err == nil {
		return existingTeam, nil
	}

	description := stringWithFallback(in.Team.Purpose, fmt.Sprintf("Team '%v', auto-generated by nais console on %s", in.Team.Name, time.Now().Format(time.RFC1123Z)))

	newTeam := github.NewTeam{
		Name:        *in.Team.Slug,
		Description: &description,
	}

	team, _, err := teamsService.CreateTeam(ctx, s.org, newTeam)
	if err != nil {
		return nil, fmt.Errorf("create new team: %w", err)
	}

	s.logs <- in.AuditLog(nil, true, s.Op("create"), "successfully created team")

	return team, nil
}

func (s *gitHubReconciler) connectUsers(ctx context.Context, in reconcilers.Input, client *github.Client, team *github.Team) error {
	userMap, err := s.mapSSOUsers(ctx, in)
	if err != nil {
		return err
	}

	members, err := s.getTeamMembers(ctx, client, *team.Slug)
	if err != nil {
		return err
	}

	usernames := make([]string, 0, len(userMap))
	for _, username := range userMap {
		usernames = append(usernames, username)
	}
	missing := missingUsers(members, usernames)

	for _, username := range missing {
		// TODO: add user role in membership options
		opts := &github.TeamAddTeamMembershipOptions{}
		_, _, err = client.Teams.AddTeamMembershipBySlug(ctx, s.org, *team.Slug, username, opts)
		if err != nil {
			return err
		}
		s.logs <- in.AuditLog(nil, true, s.Op("create-user"), "successfully created user %s on team %s", username, *team.Slug)
	}

	return nil
}

func (s *gitHubReconciler) getTeamMembers(ctx context.Context, client *github.Client, slug string) ([]*github.User, error) {
	const maxPerPage = 100
	opt := &github.TeamListTeamMembersOptions{
		ListOptions: github.ListOptions{
			PerPage: maxPerPage,
		},
	}

	allMembers := make([]*github.User, 0)
	for {
		members, resp, err := client.Teams.ListTeamMembersBySlug(ctx, s.org, slug, opt)
		if err != nil {
			return nil, err
		}
		allMembers = append(allMembers, members...)
		if resp.NextPage == 0 {
			break
		}
		opt.Page = resp.NextPage
	}

	return allMembers, nil
}

// Given a list of GitHub group members and a list of usernames,
// return usernames not present in members directory.
func missingUsers(members []*github.User, usernames []string) []string {
	userMap := make(map[string]struct{})
	for _, username := range usernames {
		userMap[username] = struct{}{}
	}
	for _, member := range members {
		delete(userMap, member.GetLogin())
	}
	usernames = make([]string, 0, len(userMap))
	for username := range userMap {
		usernames = append(usernames, username)
	}
	return usernames
}

// Given a list of Google group members and a list of users,
// return members not present in user list.
func extraMembers(members []*github.User, users []*dbmodels.User) []*github.User {
	memberMap := make(map[string]*github.User)
	for _, member := range members {
		memberMap[*member.Email] = member
	}
	for _, user := range users {
		if user.Email == nil {
			continue
		}
		delete(memberMap, *user.Email)
	}
	members = make([]*github.User, 0, len(memberMap))
	for _, member := range memberMap {
		members = append(members, member)
	}
	return members
}

// Return a mapping of user objects to GitHub usernames.
func (s *gitHubReconciler) mapSSOUsers(ctx context.Context, in reconcilers.Input) (map[*dbmodels.User]string, error) {

	// connect GitHub usernames with locally defined users.
	userMap := make(map[*dbmodels.User]string)

	for _, user := range in.Team.Users {
		if user.Email == nil {
			continue
		}
		githubUsername, err := s.lookupSSOUser(ctx, *user.Email)
		if err != nil {
			return nil, err
		}
		userMap[user] = githubUsername
	}

	return userMap, nil
}

// Look up a GitHub username from an SSO e-mail address connected to that user account.
func (s *gitHubReconciler) lookupSSOUser(ctx context.Context, email string) (string, error) {
	client, err := s.getGraphQLClient()
	if err != nil {
		return "", err
	}

	var query struct {
		Organization struct {
			SamlIdentityProvider struct {
				ExternalIdentities struct {
					Nodes []struct {
						User struct {
							Login githubv4.String
						}
					}
				} `graphql:"externalIdentities(first: 1, userName: $username)"`
			}
		} `graphql:"organization(login: $org)"`
	}

	variables := map[string]interface{}{
		"org":      githubv4.String(s.org),
		"username": githubv4.String(email),
	}

	err = client.Query(ctx, &query, variables)
	if err != nil {
		return "", err
	}

	nodes := query.Organization.SamlIdentityProvider.ExternalIdentities.Nodes
	if len(nodes) == 0 {
		return "", fmt.Errorf("user not found")
	}

	return string(nodes[0].User.Login), nil
}

func stringWithFallback(strp *string, fallback string) string {
	if strp == nil {
		return fallback
	}
	return *strp
}

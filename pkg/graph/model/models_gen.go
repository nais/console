// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"github.com/google/uuid"
	"github.com/nais/console/pkg/dbmodels"
)

type APIKey struct {
	Apikey string `json:"apikey"`
}

type APIKeyInput struct {
	UserID *uuid.UUID `json:"userID"`
}

type AddUsersToTeamInput struct {
	// List of user IDs that should be added as members to the team.
	UserID []*uuid.UUID `json:"userID"`
	// Team ID that should receive new users.
	TeamID *uuid.UUID `json:"teamID"`
}

type AssignRoleInput struct {
	RoleID *uuid.UUID `json:"roleID"`
	UserID *uuid.UUID `json:"userID"`
	TeamID *uuid.UUID `json:"teamID"`
}

type AuditLogInput struct {
	// Filter by team ID.
	TeamID *uuid.UUID `json:"teamID"`
	// Filter by user ID.
	UserID *uuid.UUID `json:"userID"`
	// Filter by system ID.
	SystemID *uuid.UUID `json:"systemID"`
	// Filter by synchronization ID.
	SynchronizationID *uuid.UUID `json:"synchronizationID"`
}

type AuditLogs struct {
	Pagination *Pagination          `json:"pagination"`
	Nodes      []*dbmodels.AuditLog `json:"nodes"`
}

type CreateRoleInput struct {
	SystemID    *uuid.UUID `json:"systemID"`
	Resource    string     `json:"resource"`
	AccessLevel string     `json:"accessLevel"`
	Permission  string     `json:"permission"`
}

type CreateTeamInput struct {
	Slug    *dbmodels.Slug `json:"slug"`
	Name    string         `json:"name"`
	Purpose *string        `json:"purpose"`
}

type CreateUserInput struct {
	Email *string `json:"email"`
	Name  string  `json:"name"`
}

// Pagination metadata attached to all queries.
type Pagination struct {
	// Total number of results that matches the query.
	Results int `json:"results"`
	// Which record number the returned dataset starts at.
	Offset int `json:"offset"`
	// Maximum number of records included in the dataset.
	Limit int `json:"limit"`
}

// Specify pagination options.
type PaginationInput struct {
	Offset int `json:"offset"`
	Limit  int `json:"limit"`
}

type QueryUserInput struct {
	Pagination *PaginationInput `json:"pagination"`
	ID         *uuid.UUID       `json:"id"`
	Email      *string          `json:"email"`
	Name       *string          `json:"name"`
}

// Query results for roles.
type Roles struct {
	Roles []*dbmodels.Role `json:"roles"`
}

type TeamRole struct {
	// ID of the rolebinding
	ID   *uuid.UUID `json:"id"`
	Name string     `json:"name"`
}

// Query results for teams.
type Teams struct {
	Pagination *Pagination      `json:"pagination"`
	Nodes      []*dbmodels.Team `json:"nodes"`
}

type UpdateRoleInput struct {
	ID          *uuid.UUID `json:"id"`
	SystemID    *uuid.UUID `json:"systemID"`
	Resource    *string    `json:"resource"`
	AccessLevel *string    `json:"accessLevel"`
	Permission  *string    `json:"permission"`
}

type UpdateUserInput struct {
	ID    *uuid.UUID `json:"id"`
	Email *string    `json:"email"`
	Name  *string    `json:"name"`
}

// Query results for users.
type Users struct {
	Pagination *Pagination      `json:"pagination"`
	Nodes      []*dbmodels.User `json:"nodes"`
}

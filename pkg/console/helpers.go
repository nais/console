package console

import (
	"fmt"
	"github.com/nais/console/pkg/dbmodels"
	"strings"
	"time"
)

func Strp(s string) *string {
	return &s
}

func DerefString(s *string) string {
	if s == nil {
		return ""

	}
	return *s
}

func StringWithFallback(strp *string, fallback string) string {
	if strp == nil || *strp == "" {
		return fallback
	}
	return *strp
}

func DomainUsers(users []*dbmodels.User, domain string) []*dbmodels.User {
	domainUsers := make([]*dbmodels.User, 0)
	suffix := "@" + domain

	for _, user := range users {
		if strings.HasSuffix(user.Email, suffix) {
			domainUsers = append(domainUsers, user)
		}
	}

	return domainUsers
}

// ServiceAccountEmail Generate a service account email address given the name of the service account
func ServiceAccountEmail(name dbmodels.Slug, partnerDomain string) string {
	return string(name) + serviceAccountSuffix(partnerDomain)
}

// IsServiceAccount Check if a user is a service account or not
func IsServiceAccount(user dbmodels.User, partnerDomain string) bool {
	return strings.HasSuffix(user.Email, serviceAccountSuffix(partnerDomain))
}

// TeamPurpose Get a default team purpose
func TeamPurpose(purpose *string) string {
	return StringWithFallback(
		purpose,
		fmt.Sprintf("auto-generated by nais console on %s", time.Now().Format(time.RFC1123Z)),
	)
}

func serviceAccountSuffix(partnerDomain string) string {
	const serviceAccountSuffix = "serviceaccounts.nais.io"
	return "@" + partnerDomain + "." + serviceAccountSuffix
}

extend type Query {
    "Get a collection of audit log entries."
    auditLogs(
        "Pagination options."
        pagination: Pagination

        "Input for filtering the query."
        query: AuditLogsQuery

        "Input for sorting the collection. If omitted the collection will be sorted by the creation time in descending order."
        sort: AuditLogsSort
    ): AuditLogs! @auth
}

"Audit log type."
type AuditLog {
    "ID of the log entry."
    id: UUID!

    "The related system."
    system: System!

    "The related synchronization."
    synchronization: Synchronization!

    "The related user."
    user: User

    "The related team."
    team: Team

    "String representation of the action performed."
    action: String!

    "Whether or not the action was successful."
    success: Boolean!

    "Log entry message."
    message: String!

    "Creation time of the log entry."
    createdAt: Time!
}

"Audit log collection."
type AuditLogs {
    "Object related to pagination of the collection."
    pageInfo: PageInfo!

    "The list of audit log entries in the collection."
    nodes: [AuditLog!]!
}

"Input for filtering a collection of audit log entries."
input AuditLogsQuery {
    "Filter by team ID."
    teamId: UUID

    "Filter by user ID."
    userId: UUID

    "Filter by system ID."
    systemId: UUID

    "Filter by synchronization ID."
    synchronizationId: UUID
}

"Input for sorting a collection of audit log entries."
input AuditLogsSort {
    "Field to sort by."
    field: AuditLogSortField!

    "Sort direction."
    direction: SortDirection!
}

"Fields to sort the collection by."
enum AuditLogSortField {
    "Sort by creation time."
    created_at
}
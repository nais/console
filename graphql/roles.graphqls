extend type Query {
    "Get a collection of users."
    roles(
        "Pagination options."
        pagination: Pagination

        "Input for filtering the query."
        query: RolesQuery

        "Input for sorting the collection. If omitted the collection will be sorted by the name of the role in ascending order."
        sort: RolesSort
    ): Roles! @auth
}

extend type Mutation {
    "Assign a role to a user."
    assignRoleToUser(
        "Input for assigning a role to a user."
        input: AssignRoleInput!
    ): RoleBinding! @auth

    "Remove a role from a user."
    removeRoleFromUser(
        "Input for removing a role from a user."
        input: RemoveRoleInput!
    ): Boolean! @auth
}

"Role binding type."
type RoleBinding {
    "ID of the binding."
    id: UUID!

    "The connected role."
    role: Role!

    "The connected user."
    user: User!

    "The connected team."
    team: Team
}

"Role type."
type Role {
    "ID of the role."
    id: UUID!

    "Name of the role."
    name: String!

    "Resource of the role."
    resource: String!

    "The access level of the role."
    accessLevel: String!

    "The permission of the role."
    permission: String!
}

"Role collection."
type Roles {
    "Object related to pagination of the collection."
    pageInfo: PageInfo!

    "The list of roles in the collection."
    nodes: [Role!]!
}

"Input for filtering a collection of roles."
input RolesQuery {
    "Filter by role name."
    name: String

    "Filter by resource."
    resource: String

    "Filter by access level."
    accessLevel: String

    "Filter by permission."
    permission: String
}

"Input for sorting a collection of roles."
input RolesSort {
    "Field to sort by."
    field: RoleSortField!

    "Sort direction."
    direction: SortDirection!
}

"Input for assigning a rule."
input AssignRoleInput {
    "The ID of the role."
    roleId: UUID!

    "The ID of the user."
    userId: UUID!

    "The ID of the team."
    teamId: UUID!
}

"Input for removing a rule."
input RemoveRoleInput {
    "The ID of the role."
    roleId: UUID!

    "The ID of the user."
    userId: UUID!

    "The ID of the team."
    teamId: UUID!
}

"Fields to sort the collection by."
enum RoleSortField {
    "Sort by name."
    name
}
extend type Query {
    "Get a collection of users."
    users(
        "Input for filtering the query."
        input: QueryUsersInput

        "Input for sorting the collection. If omitted the collection will be sorted by the name of the user in ascending order."
        sort: QueryUsersSortInput
    ): Users! @auth

    "Get a specific user."
    user(
        "ID of the user."
        id: UUID!
    ): User! @auth

    "The currently authenticated user."
    me: User! @auth
}

extend type Mutation {
    "Create and return a new user."
    createUser(
        "Input for creation of the new user."
        input: CreateUserInput!
    ): User! @auth

    "Update an existing user, and return the updated user object."
    updateUser(
        "Input for updating the existing user."
        input: UpdateUserInput!
    ): User! @auth
}

"User type."
type User {
    "Unique ID of the user."
    id: UUID!

    "The email address of the user."
    email: String

    "The name of the user."
    name: String!

    "List of teams the user is a member of."
    teams: [Team!]!

    "List of role bindings assigned to the user."
    roleBindings(
        "Fetch role bindings for this team only."
        teamId: UUID
    ): [RoleBinding!]!

    "Creation time of the user."
    createdAt: Time
}

"User collection."
type Users {
    "Object related to pagination of the collection."
    pagination: Pagination!

    "The list of user objects in the collection."
    nodes: [User!]!
}

"Input for filtering a collection of users."
input QueryUsersInput {
    "Pagination options."
    pagination: PaginationInput

    "Filter by user email."
    email: String

    "Filter by user name."
    name: String
}

"Input for sorting a collection of users."
input QueryUsersSortInput {
    "Field to sort by."
    field: UserSortField!

    "Sort direction."
    direction: SortDirection!
}

"Input for creating a new user."
input CreateUserInput {
    "The email address of the new user. Must not already exist, if set."
    email: String

    "The name of the new user."
    name: String!
}

"Input for updating an existing user."
input UpdateUserInput {
    "The ID of the existing user."
    id: UUID!

    "The updated email address of the user."
    email: String

    "The updated name of the user."
    name: String
}

"Fields to sort the collection by."
enum UserSortField {
    "Sort by name."
    name

    "Sort by email address."
    email

    "Sort by creation time."
    created_at
}
extend type Query {
    "Get a collection of teams."
    teams(
        "Pagination options."
        pagination: Pagination

        "Input for filtering the query."
        input: TeamsQuery

        "Input for sorting the collection. If omitted the collection will be sorted by the name of the team in ascending order."
        sort: TeamsSort
    ): Teams! @auth

    "Get a specific team."
    team(
        "ID of the team."
        id: UUID!
    ): Team! @auth
}

extend type Mutation {
    "Create a team, then return the created team."
    createTeam(
        "Input for creation of the new team."
        input: CreateTeamInput!
    ): Team! @auth

    "Add one or more users to a team, then return the team in question."
    addUsersToTeam(
        "Input for adding users to a team."
        input: AddUsersToTeamInput!
    ): Team! @auth

    "Remove one or more users from a team, then return team in question."
    removeUsersFromTeam(
        "Input for removing users from a team."
        input: RemoveUsersFromTeamInput!
    ): Team! @auth
}

"Team type."
type Team {
    "ID of the team."
    id: UUID!

    "Unique slug of the team."
    slug: Slug!

    "Display name of the team."
    name: String!

    "Purpose of the team."
    purpose: String

    "List of users in the team."
    users: [User!]!

    "Metadata attached to the team as a key => value map."
    metadata: Map
}

"Team collection."
type Teams {
    "Object related to pagination of the collection."
    pageInfo: PageInfo!

    "The list of team objects in the collection."
    nodes: [Team!]!
}

"Input for filtering a collection of teams."
input TeamsQuery {
    "Filter by slug."
    slug: Slug

    "Filter by name."
    name: String
}

"Input for sorting a collection of teams."
input TeamsSort {
    "Field to sort by."
    field: TeamSortField!

    "Sort direction."
    direction: SortDirection!
}

"Input for creating a new team."
input CreateTeamInput {
    "Team slug."
    slug: Slug!

    "Team name."
    name: String!

    "Team purpose."
    purpose: String
}

"Input for adding users to a team."
input AddUsersToTeamInput {
    "List of user IDs that should be added to the team."
    userIds: [UUID!]!

    "Team ID that should receive new users."
    teamId: UUID!
}

"Input for removing users from a team."
input RemoveUsersFromTeamInput {
    "List of user IDs that should be removed from the team."
    userIds: [UUID!]!

    "Team ID that should receive new users."
    teamId: UUID!
}

"Fields to sort the collection by."
enum TeamSortField {
    "Sort by name."
    name

    "Sort by slug."
    slug

    "Sort by creation time."
    created_at
}
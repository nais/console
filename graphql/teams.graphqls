extend type Query {
    "Search for teams."
    teams(input: TeamsQueryInput): Teams! @auth

    "Get a specific team"
    team(id: UUID!): Team! @auth
}

extend type Mutation {
    "Create a team, then return the created team."
    createTeam(input: CreateTeamInput!): Team! @auth

    "Add one or more users to a team, then return the team in question."
    addUsersToTeam(input: AddUsersToTeamInput!): Team! @auth

    "Remove one or more users from a team, then return team in question."
    removeUsersFromTeam(input: AddUsersToTeamInput!): Team! @auth
}

"Query results for teams."
type Teams {
    pagination: Pagination!
    nodes: [Team!]!
}

input TeamsQueryInput {
    pagination: PaginationInput
    id: UUID
    slug: Slug
}

input CreateTeamInput {
    slug: Slug!
    name: String!
    purpose: String
}

input AddUsersToTeamInput {
    "List of user IDs that should be added as members to the team."
    userID: [UUID!]!
    "Team ID that should receive new users."
    teamID: UUID!
}

